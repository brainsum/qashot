<?php

/**
 * @file
 * Contains qa_shot.module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\qa_shot\Exception\QAShotBaseException;

/**
 * Implements hook_help().
 *
 * {@inheritdoc}
 */
function qa_shot_help($route_name, RouteMatchInterface $route_match) {
  // Main module help for the qa_shot module.
  if ('help.page.qa_shot' === $route_name) {
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Module for test management.') . '</p>';
    return $output;
  }
}

// @codingStandardsIgnoreStart
// @todo: implement this garbage collection here for our custom queues.
///**
// * Implements hook_cron().
// *
// * Remove older rows from flood, batch cache and expirable keyvalue tables.
// */
//function system_cron() {
//  // Clean up the flood.
//  \Drupal::flood()->garbageCollection();
//
//  foreach (Cache::getBins() as $cache_backend) {
//    $cache_backend->garbageCollection();
//  }
//
//  // Clean up the expirable key value database store.
//  if (\Drupal::service('keyvalue.expirable.database') instanceof KeyValueDatabaseExpirableFactory) {
//    \Drupal::service('keyvalue.expirable.database')->garbageCollection();
//  }
//
//  // Clean up any garbage in the queue service.
//  $queue_worker_manager = \Drupal::service('plugin.manager.queue_worker');
//  $queue_factory = \Drupal::service('queue');
//
//  foreach (array_keys($queue_worker_manager->getDefinitions()) as $queue_name) {
//    $queue = $queue_factory->get($queue_name);
//
//    if ($queue instanceof QueueGarbageCollectionInterface) {
//      $queue->garbageCollection();
//    }
//  }
//
//  // Clean up PHP storage.
//  PhpStorageFactory::get('container')->garbageCollection();
//  PhpStorageFactory::get('service_container')->garbageCollection();
//}
// @codingStandardsIgnoreEnd

/**
 * Implements hook_theme().
 */
function qa_shot_theme() {
  $theme = [];
  $theme['qa_shot_test'] = [
    'render element' => 'elements',
    'file' => 'qa_shot_test.page.inc',
    'template' => 'qa_shot_test',
  ];
  $theme['qa_shot_test_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'qa_shot_test.page.inc',
  ];
  $theme['qa_shot__qa_shot_test__run'] = [
    'template' => 'qa_shot_test--run',
    'variables' => [
      'entity' => NULL,
      'html_report_url' => NULL,
      'remote_html_report_url' => NULL,
      'report_time' => NULL,
      'queue_status' => NULL,
      'result_exist' => NULL,
      'last_run_time' => NULL,
      'last_reference_run_time' => NULL,
      'last_test_run_time' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function qa_shot_theme_suggestions_qa_shot_test(array $variables) {
  $suggestions = [];
  /** @var \Drupal\qa_shot\Entity\QAShotTest $entity */
  $entity = $variables['elements']['#qa_shot_test'];
  $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);

  $suggestions[] = 'qa_shot_test__' . $sanitized_view_mode;
  $suggestions[] = 'qa_shot_test__' . $entity->bundle();
  $suggestions[] = 'qa_shot_test__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'qa_shot_test__' . $entity->id();
  $suggestions[] = 'qa_shot_test__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_mail().
 */
function qa_shot_mail($key, &$message, $params) {
  switch ($key) {
    case 'qashot_test_notification':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function qa_shot_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  // Display the run button on QAShot edit form only.
  if ($form_id === 'qa_shot_test_a_b_edit_form') {
    $form['actions']['run'] = [
      '#type' => 'submit',
      '#value' => t('Add test to queue'),
      '#weight' => $form['actions']['submit']['#weight'] + 1,
      // '#ajax' => ['callback' => [$this, 'ajaxCallback']], //.
      '#submit' => ['qa_shot_qa_shot_test_run_handler'],
    ];
  }
  // Display the run before/after buttons on QAShot edit form only.
  elseif ($form_id === 'qa_shot_test_before_after_edit_form') {
    $form['actions']['run_reference'] = [
      '#type' => 'submit',
      '#value' => t('Queue taking "Before" shots'),
      '#weight' => $form['actions']['submit']['#weight'] + 1,
      '#submit' => ['qa_shot_qa_shot_test_run_handler'],
    ];

    // Show this option only in that case, if there's at least one run.
    // NOTE: Currently any ways the first run is the "before" run.
    $test_metadata = $form_state->getFormObject()
      ->getEntity()
      ->getLifetimeMetadataValue();
    if (count($test_metadata) > 0) {
      $form['actions']['run_after'] = [
        '#type' => 'submit',
        '#value' => t('Queue taking "After" shots'),
        '#weight' => $form['actions']['submit']['#weight'] + 1,
        '#submit' => ['qa_shot_qa_shot_test_run_handler'],
      ];
    }
  }
}

/**
 * Handler function for the "Run test" button.
 *
 * {@inheritdoc}
 */
function qa_shot_qa_shot_test_run_handler(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\qa_shot\Entity\QAShotTest $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $triggering_element_id = $form_state->getTriggeringElement()['#id'];

  $stage = -1;

  switch ($triggering_element_id) {
    case 'edit-run':
      $stage = NULL;
      break;

    case 'edit-run-reference':
      $stage = 'before';
      break;

    case 'edit-run-after':
      $stage = 'after';
      break;
  }

  /** @var \Drupal\Core\Messenger\MessengerInterface $messenger */
  $messenger = \Drupal::messenger();

  if ($stage !== -1) {
    /** @var \Drupal\qa_shot\Service\QueueManager $queueManager */
    $queueManager = \Drupal::service('qa_shot.queue_manager');

    try {
      $queueManager->addTest($entity, $stage);
    }
    catch (QAShotBaseException | EntityStorageException $exception) {
      $messenger->addMessage($exception->getMessage(), 'error');
    }
  }
  else {
    $messenger->addMessage(t('Invalid stage detected, cannot add test to the queue.'), 'warning');
  }

  $form_state->setRedirect(
    'entity.qa_shot_test.run',
    [
      'qa_shot_test' => $entity->id(),
    ]
  );
}
