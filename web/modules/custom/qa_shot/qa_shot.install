<?php

/**
 * @file
 * Install file for the qa_shot module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\qa_shot\QAShotSchemaDefinitions;
use Drupal\qa_shot\Queue\QAShotQueue;
use Drupal\system\Entity\Action;

/**
 * Implements hook_requirements().
 */
function qa_shot_requirements() {
  $requirements = [];

  $requirements['qa_shot_required_php_version'] = [
    'title' => t('QAShot PHP Version'),
    'value' => PHP_VERSION,
    'severity' => REQUIREMENT_OK,
    'description' => t('QAShot requires PHP 7'),
  ];

  if (version_compare(PHP_VERSION, '7', '<')) {
    $requirements['qa_shot_required_php_version']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function qa_shot_schema() {
  $schemaDefinitions = new QAShotSchemaDefinitions();

  return $schemaDefinitions->everySchema();
}

/**
 * Remove every QAShot Test entity.
 */
function qa_shot_update_8201() {
  $tests = \Drupal::entityTypeManager()->getStorage('qa_shot_test')->loadMultiple();

  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface $test */
  foreach ($tests as $test) {
    $test->delete();
  }
}

/**
 * Remove the QAShot Test entity type.
 */
function qa_shot_update_8202() {
  $entity_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_update_manager->getEntityType('qa_shot_test');
  $entity_update_manager->uninstallEntityType($entity_type);
}

/**
 * Truncate the metadata fields so they can be updated.
 */
function qa_shot_update_8203() {
  // Set the fields to NULL properly.
  $testStorage = \Drupal::entityTypeManager()->getStorage('qa_shot_test');
  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface[] $tests */
  $tests = $testStorage->loadMultiple();

  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface $test */
  foreach ($tests as $test) {
    $test->set('metadata_last_run', []);
    $test->set('metadata_lifetime', []);
    $test->save();
  }

  $database = \Drupal::database();
  // If there are stuck values (improper removal of an entity, etc.),
  // remove them.
  $database->truncate('qa_shot_test__metadata_last_run')->execute();
  $database->truncate('qa_shot_test__metadata_lifetime')->execute();
}

/**
 * Truncate the metadata fields so they can be updated.
 */
function qa_shot_update_8301() {
  // Set the fields to NULL properly.
  $testStorage = \Drupal::entityTypeManager()->getStorage('qa_shot_test');
  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface[] $tests */
  $tests = $testStorage->loadMultiple();

  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface $test */
  foreach ($tests as $test) {
    $test->set('metadata_last_run', []);
    $test->set('metadata_lifetime', []);
    $test->save();
  }

  $database = \Drupal::database();
  // If there are stuck values (improper removal of an entity, etc.),
  // remove them.
  $database->truncate('qa_shot_test__metadata_last_run')->execute();
  $database->truncate('qa_shot_test__metadata_lifetime')->execute();
}

/**
 * Some tables have not been purged properly.
 */
function qa_shot_update_8302() {
  $database = \Drupal::database();
  // If there are stuck values (improper removal of an entity, etc.),
  // remove them.
  if (!$database->schema()->tableExists('field_deleted_data_81ed64c1a3')) {
    $database->query('CREATE TABLE field_deleted_data_81ed64c1a3 ( entity_id int, bundle varchar(20), PRIMARY KEY (entity_id));');
    drupal_flush_all_caches();
    field_purge_batch(100);
  }

  if ($database->schema()->tableExists('field_deleted_data_8d252dda90')) {
    $database->schema()->dropTable('field_deleted_data_8d252dda90');
  }

  drupal_flush_all_caches();
  field_purge_batch(100);
}

/**
 * Clone field_scenario into field_scenario_backup, then delete the old one.
 */
function qa_shot_update_8303() {
  field_purge_batch(100);
  drupal_flush_all_caches();
  $entityTypeManager = \Drupal::entityTypeManager();

  if (!$scenarioField = $entityTypeManager->getStorage('field_config')->loadByProperties([
    'field_type' => 'qa_shot_scenario',
  ])['qa_shot_test.a_b.field_scenario']) {
    return;
  }

  if (!$scenarioStorage = $entityTypeManager->getStorage('field_storage_config')->loadByProperties([
    'type' => 'qa_shot_scenario',
  ])['qa_shot_test.field_scenario']) {
    return;
  }

  if (!$scenarioStorageBackup = $entityTypeManager->getStorage('field_storage_config')->loadByProperties([
    'type' => 'qa_shot_scenario',
  ])['qa_shot_test.field_scenario_backup']) {
    // Clone FieldStorageConfig.
    $new_field_storage = $scenarioStorage->toArray();
    $new_field_storage['field_name'] .= '_backup';
    unset($new_field_storage['uuid'], $new_field_storage['id']);
    $new_field_storage = FieldStorageConfig::create($new_field_storage);
    $new_field_storage->enforceIsNew(TRUE);
    $new_field_storage->save();
  }

  if (!$scenarioFieldBackup = $entityTypeManager->getStorage('field_config')->loadByProperties([
    'field_type' => 'qa_shot_scenario',
  ])['qa_shot_test.a_b.field_scenario_backup']) {
    // Clone FieldConfig.
    $new_field = $scenarioField->toArray();
    $new_field['field_name'] .= '_backup';
    $new_field['label'] .= ' (Backup)';
    $new_field['config'][] = 'field.storage.qa_shot_test.field_scenario_backup';
    unset(
      $new_field['uuid'],
      $new_field['id'],
      $new_field['config']['field.storage.qa_shot_test.field_scenario']
    );
    $new_field = $entityTypeManager->getStorage('field_config')->create($new_field);
    $new_field->enforceIsNew(TRUE);
    $new_field->save();
  }

  $tests = $entityTypeManager->getStorage('qa_shot_test')->loadMultiple();

  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface $test */
  foreach ($tests as $test) {
    // Set the new viewport values and save the test.
    $test->set('field_scenario_backup', $test->get('field_scenario')->getValue());
    $test->save();
  }

  // Remove old scenario field and storage.
  $entityTypeManager->getStorage('field_config')->delete([$scenarioField]);
  $entityTypeManager->getStorage('field_storage_config')->delete([$scenarioStorage]);
  field_purge_batch(100);
  drupal_flush_all_caches();
}

/**
 * Create a new field_scenario for paragraphs.
 */
function qa_shot_update_8304() {
  field_purge_batch(100);
  drupal_flush_all_caches();
  $entityTypeManager = \Drupal::entityTypeManager();

  // Add a paragraphs field.
  $field_storage = $entityTypeManager->getStorage('field_storage_config')
    ->create([
      'uuid' => '408fb3d6-d1ae-4648-bbf2-5752610b8fa2',
      'field_name' => 'field_scenario',
      'entity_type' => 'qa_shot_test',
      'type' => 'entity_reference_revisions',
      'cardinality' => '-1',
      'settings' => [
        'target_type' => 'paragraph',
      ],
    ]);
  $field_storage->enforceIsNew(TRUE);
  $field_storage->save();

  $field = $entityTypeManager->getStorage('field_config')->create([
    'uuid' => '9ead64b1-5d07-4be5-921d-4f4d325f9bcf',
    'field_storage' => $field_storage,
    'label' => 'Scenario',
    'bundle' => 'a_b',
    'settings' => [
      'handler' => 'default:paragraph',
      'handler_settings' => [
        'target_bundles' => ['scenario' => 'scenario'],
        'target_bundles_drag_drop' => ['scenario' => ['enabled' => TRUE], 'weight' => 1],
      ],
    ],
    'required' => TRUE,
  ]);
  $field->enforceIsNew(TRUE);
  $field->save();

  field_purge_batch(100);
  drupal_flush_all_caches();
}

/**
 * Copy field_scenario_backup data to the new, paragraphs based field_scenario.
 */
function qa_shot_update_8305() {
  field_purge_batch(100);
  drupal_flush_all_caches();

  $entityTypeManager = \Drupal::entityTypeManager();
  $paragraphStorage = $entityTypeManager->getStorage('paragraph');
  $tests = $entityTypeManager->getStorage('qa_shot_test')->loadMultiple();

  /** @var \Drupal\qa_shot\Entity\QAShotTestInterface $test */
  foreach ($tests as $test) {
    $scenarios = $test->get('field_scenario_backup')->getValue();

    if (empty($scenarios)) {
      continue;
    }

    $paragraphs = [];

    foreach ($scenarios as $scenario) {
      $paragraph = $paragraphStorage->create([
        'type' => 'scenario',
        'field_label' => $scenario['label'],
        'field_reference_url' => $scenario['testUrl'],
        'field_test_url' => $scenario['referenceUrl'],
      ]);

      $paragraphs[] = $paragraph;
    }

    // Set the new scenario values and save the test.
    $test->set('field_scenario', $paragraphs);
    $test->set('field_scenario_backup', []);
    $test->save();
  }

  $database = \Drupal::database();
  // If there are stuck values (improper removal of an entity, etc.),
  // remove them.
  $database->query('TRUNCATE TABLE qa_shot_test__field_scenario_backup;');

  if ($scenarioField = $entityTypeManager->getStorage('field_config')
    ->loadByProperties([
      'field_type' => 'qa_shot_scenario',
    ])['qa_shot_test.a_b.field_scenario_backup']
  ) {
    $entityTypeManager->getStorage('field_config')->delete([$scenarioField]);
  }

  if ($scenarioStorage = $entityTypeManager->getStorage('field_storage_config')
    ->loadByProperties([
      'type' => 'qa_shot_scenario',
    ])['qa_shot_test.field_scenario_backup']
  ) {
    $entityTypeManager->getStorage('field_storage_config')
      ->delete([$scenarioStorage]);
  }

  field_purge_batch(100);
  drupal_flush_all_caches();
}

/**
 * Truncate results and metadata in preparation of field updates.
 */
function qa_shot_update_8306() {
  $database = \Drupal::database();
  $database->truncate('qa_shot_test__result')->execute();
  $database->truncate('qa_shot_test__metadata_last_run')->execute();
  $database->truncate('qa_shot_test__metadata_lifetime')->execute();
}

/**
 * Add custom queue table.
 */
function qa_shot_update_8307() {
  $schemaDefinitions = new QAShotSchemaDefinitions();
  $queueSchema = $schemaDefinitions->queueSchema();
  $database_schema = \Drupal::database()->schema();

  foreach ($queueSchema as $tableName => $schema) {
    if (!$database_schema->tableExists($tableName)) {
      $database_schema->createTable($tableName, $schema);
    }
  }
}

/**
 * Clear the core queue table from qa_shot queues.
 */
function qa_shot_update_8308() {
  $query = \Drupal::database()->delete('queue');
  $query->condition('name', 'cron_run_qa_shot_test');
  $query->execute();
}

/**
 * Create the action 'qa_shot_queue_test'.
 */
function qa_shot_update_8309() {
  $actionId = 'qa_shot_queue_test';
  if (!Action::load($actionId)) {
    $action = Action::create([
      'id' => $actionId,
      'type' => 'qa_shot_test',
      'label' => t('Add the test to the queue'),
      'plugin' => $actionId,
    ]);
    $action->trustData()->save();
  }
}

/**
 * Change initiated field's type to 'timestamp' from 'datetime'.
 */
function qa_shot_update_8310() {
  // Save current values.
  $current_values = \Drupal::database()->query("SELECT id, initiated FROM qa_shot_test WHERE initiated IS NOT NULL")->fetchAllAssoc('id');

  // Set NULL for every record in initiated to be able to change field type.
  \Drupal::database()->query("UPDATE qa_shot_test SET initiated = NULL")->execute();

  // Change field definition.
  /* @var $definition_manager \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface */
  $definition_manager = \Drupal::service('entity.definition_update_manager');
  $fieldDef = $definition_manager->getFieldStorageDefinition('initiated', 'qa_shot_test');
  $definition_manager->uninstallFieldStorageDefinition($fieldDef);
  $definition_manager->installFieldStorageDefinition('initiated', 'qa_shot_test', 'qa_shot', BaseFieldDefinition::create('timestamp')
    ->setLabel(t('Initiated'))
    ->setDescription(t('The time that the entity was last initiated.')));

  // Set back deleted values if possible.
  $trans_conn = \Drupal::database();
  $transaction = $trans_conn->startTransaction();
  try {
    foreach ($current_values as $value) {
      $trans_conn->update('qa_shot_test')
        ->fields(['initiated' => $value->initiated])
        ->condition('id', $value->id, '=')
        ->execute();
    }
  }
  catch (Exception $e) {
    watchdog_exception('qashot', $e);
  }
}
